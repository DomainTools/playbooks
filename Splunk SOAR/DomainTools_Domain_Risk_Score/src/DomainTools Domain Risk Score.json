{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "This playbook retrieves the Domain Risk Score and throws an Alert for the Analyst to manually review the domain artifact. Users can block the domain.",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_3",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_3_to_port_4",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_4_to_port_5",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_5_to_port_1",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "79197c5a4fcf013ef4295b3aa25a8930d54953ab",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 19.999999999999986,
                    "y": -2.877698079828406e-13
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 19.999999999999986,
                    "y": 804
                },
                "2": {
                    "data": {
                        "action": "domain reputation",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "domain reputation",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "DomainTools Iris Investigate",
                        "connectorConfigs": [
                            "domaintoolscreds"
                        ],
                        "connectorId": "f18b7ef9-0cbd-4dbb-b8ed-ce62e17f0603",
                        "connectorVersion": "v1",
                        "customDatapaths": {},
                        "functionId": 1,
                        "functionName": "domain_reputation",
                        "id": "2",
                        "parameters": {
                            "domain": ""
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "domain"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "action",
                    "userCode": "\n    # Manually add the custom artifact datapath from this list. It should be in alphabetical order to make it work\n    datapaths = [\"artifact:*.cef.destinationDnsDomain\",\"artifact:*.cef.domain\",\"artifact:*.id\"]\n    \n    # Indices below are based on the position of the element in the `datapaths` variable above\n    DESTINATION_DNS_DOMAIN_ARTIFACT_INDEX = 0\n    DOMAIN_ARTIFACT_INDEX = 1\n    ARTIFACT_ID_INDEX = 2\n\n    container_artifact_data = phantom.collect2(container=container, datapath=datapaths)\n\n    # Empty `parameters` variable\n    parameters = []\n\n    # build parameters list for 'domain_reputation' call\n    for container_artifact_item in container_artifact_data:\n        if container_artifact_item[DESTINATION_DNS_DOMAIN_ARTIFACT_INDEX] is not None:\n            parameters.append({\n                \"domain\": container_artifact_item[DESTINATION_DNS_DOMAIN_ARTIFACT_INDEX],\n                \"context\": {'artifact_id': container_artifact_item[ARTIFACT_ID_INDEX]},\n            })\n        elif container_artifact_item[DOMAIN_ARTIFACT_INDEX] is not None:\n            parameters.append({\n                \"domain\": container_artifact_item[DOMAIN_ARTIFACT_INDEX],\n                \"context\": {'artifact_id': container_artifact_item[ARTIFACT_ID_INDEX]},\n            })\n\n",
                    "warnings": {},
                    "x": 0,
                    "y": 140
                },
                "3": {
                    "data": {
                        "advanced": {
                            "customName": "get min_risk_score",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "get_min_risk_score",
                        "id": "3",
                        "inputParameters": [],
                        "outputVariables": [
                            "min_risk_score"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    success, message, min_risk_score = phantom.get_list(list_name='domaintools_domain_risk', values=\"min_risk_score\")\n    get_min_risk_score__min_risk_score = min_risk_score['matches'][0]['value'][1]\n\n",
                    "warnings": {},
                    "x": 0,
                    "y": 296
                },
                "4": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": ">=",
                                        "param": "domain_reputation:action_result.summary.domain_risk",
                                        "value": "get_min_risk_score:custom_function:min_risk_score"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "4",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "decision",
                    "warnings": {},
                    "x": 80,
                    "y": 444
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "high risk domain spotted",
                            "customNameId": 0,
                            "join": []
                        },
                        "approver": {
                            "type": "user",
                            "value": "admin"
                        },
                        "functionId": 1,
                        "functionName": "high_risk_domain_spotted",
                        "id": "5",
                        "message": "Heads up, High-Risk Domain Alert! {1}{0} has a score of {1}{0}{1}",
                        "parameters": [
                            "domain_reputation:action_result.parameter.domain",
                            "domain_reputation:action_result.summary.domain_risk"
                        ],
                        "responseTime": 30,
                        "responses": [
                            {
                                "responsePrompt": "",
                                "responseType": "message"
                            }
                        ],
                        "type": "prompt"
                    },
                    "errors": {
                        "responses": [
                            {
                                "responsePrompt": "Questions cannot be empty."
                            }
                        ]
                    },
                    "id": "5",
                    "type": "prompt",
                    "warnings": {},
                    "x": 80,
                    "y": 624
                }
            },
            "notes": "The manual action is set to alert the 'admin' user. You may want to change this to something more appropriate.\n\nThe decision block has custom code that talks to a custom list that you will need to set up. \n\nName: domaintools_domain_risk\ncolumn1 | column2\nmin_risk_score | 70\n\nYou can change 70 to be any number you wish. This PB will alert someone a risk score is higher than min_risk_score."
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.8",
        "version": "5.5.0.108488"
    },
    "create_time": "2023-03-30T18:21:53.404829+00:00",
    "draft_mode": false,
    "labels": [
        "events"
    ],
    "tags": []
}