{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "This playbook retrieves domains from a given hash and imports it to an artifact. The flow will continue to import domain from a search hash  based on the run schedule.",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_4",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "id": "port_4_to_port_6",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_6_to_port_7",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_7_to_port_1",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_6_to_port_3",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_3_to_port_1",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "715a8abc7b3e6fcb3b85b58730080450adcd95df",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 70,
                    "y": 0
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 70,
                    "y": 804
                },
                "2": {
                    "data": {
                        "action": "load hash",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "DomainTools Iris Investigate",
                        "connectorConfigs": [
                            "domaintoolscreds"
                        ],
                        "connectorId": "f18b7ef9-0cbd-4dbb-b8ed-ce62e17f0603",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "load_hash_1",
                        "id": "2",
                        "parameters": {},
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "search_hash"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "action",
                    "warnings": {},
                    "x": 50,
                    "y": 148
                },
                "3": {
                    "data": {
                        "advanced": {
                            "customName": "import_domains_to_artifact",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "import_domains_to_artifact",
                        "id": "3",
                        "inputParameters": [
                            "parse_result:custom_function:result_count",
                            "parse_result:custom_function:result_data"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(f\"dt debug - Importing {parse_result__result_count} domains to artifact\")\n    uniquely_added_domains = []\n    \n    for domain in parse_result__result_data:\n        cef_data = {\"domain\": domain }\n        artifact_data = dict(\n            name=domain,\n            cef=cef_data,\n            cef_types= {\"domain\": [\"domain\"]},\n            container_id=container.get(\"id\"),\n            data={},\n            label=\"imported domain\",\n            run_automation=False,\n            severity='low',\n            source_data_identifier=domain,\n            tags=[\"monitoring_search_hash\"],\n            type=\"domain\"\n        )\n        \n        rest_artifact = phantom.build_phantom_rest_url('artifact')\n        response_json = phantom.requests.post(rest_artifact, json=artifact_data, verify=False).json()\n        if response_json.get('message', '') == 'artifact already exists':\n            phantom.debug(f\"Artifact already exists: '{response_json['existing_artifact_id']}'\")\n        else:\n            uniquely_added_domains.append(domain)\n\n    phantom.debug(f\"dt debug - Imported {len(uniquely_added_domains)} domains to artifacts.\")\n",
                    "warnings": {},
                    "x": 180,
                    "y": 632
                },
                "4": {
                    "customCode": null,
                    "data": {
                        "advanced": {
                            "customName": "parse_result",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "parse_result",
                        "id": "4",
                        "inputParameters": [
                            "load_hash_1:action_result.summary",
                            "load_hash_1:action_result.data"
                        ],
                        "outputVariables": [
                            "result_count",
                            "result_data"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(f\"dt debug - load hash request status: {success}\")\n    if success:\n        result_count = load_hash_1_result_item_0[0][\"Connected Domains Count\"]\n        result_data = load_hash_1_result_item_1[0]\n        \n        parse_result__result_count = result_count\n        parse_result__result_data = [\n            result.get(\"domain\")\n            for result in result_data or [{}]\n        ]\n    else:\n        # load hash request succeeds > 5000 results\n        err_msg = results[0][\"action_results\"][0][\"message\"]\n        phantom.error(f\"dt error - error on querying search hash param. message: {err_msg}\")\n        parse_result__result_count = 5001\n        parse_result__result_data = err_msg\n    \n",
                    "warnings": {},
                    "x": 50,
                    "y": 296
                },
                "6": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": ">",
                                        "param": "parse_result:custom_function:result_count",
                                        "value": "5000"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "decision_2",
                        "id": "6",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "decision",
                    "warnings": {},
                    "x": 130,
                    "y": 444
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "monitoring_hash_error",
                            "customNameId": 0,
                            "join": []
                        },
                        "approver": {
                            "type": "user",
                            "value": "admin"
                        },
                        "functionId": 1,
                        "functionName": "monitoring_hash_error",
                        "id": "7",
                        "message": "{0}",
                        "parameters": [
                            "parse_result:custom_function:result_data"
                        ],
                        "responseTime": 30,
                        "responses": [],
                        "type": "prompt"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "prompt",
                    "warnings": {},
                    "x": 0,
                    "y": 624
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.9",
        "version": "6.0.0.114895"
    },
    "create_time": "2023-08-09T13:01:15.256749+00:00",
    "draft_mode": false,
    "labels": [
        "events"
    ],
    "tags": []
}