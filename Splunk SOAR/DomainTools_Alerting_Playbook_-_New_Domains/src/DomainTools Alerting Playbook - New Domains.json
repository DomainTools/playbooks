{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "This playbook retrieves domain from a given search hash with built-in \u201cfirst_seen\u201d param. The flow will continue to retrieve new domains based on the scheduled run",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_3",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_3_to_port_5",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_5_to_port_4",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_5_to_port_1",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_4_to_port_6",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_6_to_port_7",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_7_to_port_1",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "618c5bf8b59b745172ac2f3803581cead230f9fd",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 110,
                    "y": -1.9184653865522705e-13
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 110,
                    "y": 1116
                },
                "2": {
                    "data": {
                        "action": "load hash",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "DomainTools Iris Investigate",
                        "connectorConfigs": [
                            "domaintoolscreds"
                        ],
                        "connectorId": "f18b7ef9-0cbd-4dbb-b8ed-ce62e17f0603",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "load_hash_1",
                        "id": "2",
                        "parameters": {
                            "search_hash": ""
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "search_hash"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "action",
                    "warnings": {},
                    "x": 90,
                    "y": 148
                },
                "3": {
                    "data": {
                        "advanced": {
                            "customName": "parse_new_domains",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "parse_new_domains",
                        "id": "3",
                        "inputParameters": [
                            "load_hash_1:action_result.data"
                        ],
                        "outputVariables": [
                            "new_domains",
                            "new_domains_count"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "code",
                    "userCode": "    \n    # Write your custom code here...\n    new_domains = []\n    for results in load_hash_1_result_item_0:\n        for result in results:\n            risk_score = result.get(\"domain_risk\", {}).get(\"risk_score\")\n            domain = result.get(\"domain\")\n            is_active = result.get(\"active\")\n            new_domains.append({\"domain\": domain, \"risk_score\": risk_score, \"active\": is_active})\n    \n    parse_new_domains__new_domains = new_domains\n    parse_new_domains__new_domains_count = len(new_domains)\n",
                    "warnings": {},
                    "x": 90,
                    "y": 296
                },
                "4": {
                    "data": {
                        "advanced": {
                            "customName": "create_event",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "create_event",
                        "id": "4",
                        "inputParameters": [
                            "parse_new_domains:custom_function:new_domains"
                        ],
                        "outputVariables": [
                            "container_id",
                            "out_file_name",
                            "container_name"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    from datetime import datetime\n    now = datetime.now().strftime(\"%Y%m%d\")\n    container_name = f\"new_domains_alert_{now}\"\n    \n    # make sure to create one event per day\n    rest_url = phantom.get_rest_base_url()\n    response = phantom.requests.get(\n        f\"{rest_url}container?_filter_name='{container_name}'\",\n        verify=False,\n    )\n    result = response.json()\n    if result.get(\"count\") > 0: # get the current container\n        phantom.debug(f\"dt debug - {container_name} container exist. Skipping creation of new event.\")\n        container_id = result.get(\"data\")[0][\"id\"]\n        container_name = result.get(\"data\")[0][\"name\"]\n    else: # create a new one\n        phantom.debug(f\"dt debug - creating container {container_name}\")\n        success, message, container_id = phantom.create_container(name=container_name, label='events')\n        container = phantom.get_container(container_id)\n        container_name = container.get(\"name\")\n        phantom.debug(\n            f\"dt debug - create container results: success: {success}, message: {message}, container_id: {container_id}\")\n    \n    create_event__container_id = container_id\n    create_event__out_file_name = f\"new_domains_alert_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\"\n    create_event__container_name = container_name\n",
                    "warnings": {},
                    "x": 0,
                    "y": 624
                },
                "5": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": ">=",
                                        "param": "parse_new_domains:custom_function:new_domains_count",
                                        "value": "1"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "5",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "decision",
                    "warnings": {},
                    "x": 170,
                    "y": 444
                },
                "6": {
                    "data": {
                        "advanced": {
                            "customName": "output_new_domains_to_csv",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 3,
                        "functionName": "output_new_domains_to_csv",
                        "id": "6",
                        "inputParameters": [
                            "parse_new_domains:custom_function:new_domains",
                            "create_event:custom_function:container_id",
                            "create_event:custom_function:out_file_name",
                            "parse_new_domains:custom_function:new_domains_count"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    import csv\n    \n    file_name = create_event__out_file_name\n    phantom.debug(f\"dt debug - exporting {parse_new_domains__new_domains_count} to csv file.\")\n    \n    with open(f\"/opt/phantom/vault/tmp/{file_name}\", \"w\", newline='') as report_csv_file:\n        headers = [\"domain\", \"risk_score\", \"active\"]\n        writer = csv.DictWriter(report_csv_file, fieldnames=headers)\n        \n        writer.writeheader()\n        for domain in parse_new_domains__new_domains:\n            writer.writerow(domain)\n            \n    phantom.vault_add(container=create_event__container_id, file_location=f\"/opt/phantom/vault/tmp/{file_name}\", file_name=file_name)\n\n",
                    "warnings": {},
                    "x": 0,
                    "y": 780
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "alert_new_domains_found",
                            "customNameId": 0,
                            "join": []
                        },
                        "approver": {
                            "type": "user",
                            "value": "admin"
                        },
                        "functionId": 1,
                        "functionName": "alert_new_domains_found",
                        "id": "7",
                        "message": "{0} New Domains found:\n\nFor more details go to Event: {1} > \"Files\" tab > Download '{2}'.",
                        "parameters": [
                            "parse_new_domains:custom_function:new_domains_count",
                            "create_event:custom_function:container_name",
                            "create_event:custom_function:out_file_name"
                        ],
                        "responseTime": 15,
                        "responses": [],
                        "type": "prompt"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "prompt",
                    "warnings": {},
                    "x": 80,
                    "y": 936
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.9",
        "version": "6.0.0.114895"
    },
    "create_time": "2023-08-11T15:56:54.987868+00:00",
    "draft_mode": false,
    "labels": [
        "events"
    ],
    "tags": []
}