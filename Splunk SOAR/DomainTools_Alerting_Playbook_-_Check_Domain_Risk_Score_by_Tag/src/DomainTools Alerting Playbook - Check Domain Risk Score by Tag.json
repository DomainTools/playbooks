{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "This playbook call iris ivestigate api with a given \"tag\". Check active domains with high risk score then alerts user and outputs all high risk domains in a csv file. \n\nThe flow will continue to retrieve new domains based on the scheduled run",
            "edges": [
                {
                    "id": "port_0_to_port_3",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_3_to_port_4",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "id": "port_4_to_port_5",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_5_to_port_7",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_7_to_port_1",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_7_to_port_8",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "id": "port_8_to_port_9",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_9_to_port_1",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "809d7bed39aa63ee08db85f2d8dbbb7660087019",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 20,
                    "y": 0
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 20,
                    "y": 1116
                },
                "3": {
                    "data": {
                        "advanced": {
                            "customName": "get_iris_tags",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "get_iris_tags",
                        "id": "3",
                        "inputParameters": [],
                        "outputVariables": [
                            "iris_tags"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    success, message, iris_tags = phantom.get_list(list_name='domaintools_monitor_iris_tags', values=\"tags\")\n    tags = iris_tags['matches'][0]['value'][1]\n    if not tags:\n        phantom.error(\"dt debug - you must add atleast one(1) tag in domaintools_monitor_iris_tags list.\")\n        return\n    get_iris_tags__iris_tags = tags\n",
                    "warnings": {},
                    "x": 0,
                    "y": 148
                },
                "4": {
                    "data": {
                        "action": "pivot action",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "DomainTools Iris Investigate",
                        "connectorConfigs": [
                            "domaintoolscreds"
                        ],
                        "connectorId": "f18b7ef9-0cbd-4dbb-b8ed-ce62e17f0603",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "pivot_action_1",
                        "id": "4",
                        "parameters": {
                            "status": "Any"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "default": "Any",
                                "field": "status"
                            },
                            {
                                "data_type": "string",
                                "field": "pivot_type"
                            },
                            {
                                "data_type": "string",
                                "field": "query_value"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "action",
                    "userCode": "\n    # Write your custom code here...\n    parameters = []\n    iris_tags = json.loads(phantom.get_run_data(key=\"get_iris_tags:iris_tags\"))\n    parameters.append({\n        \"status\": \"Any\",\n        \"pivot_type\": \"tagged_with_any\",\n        \"query_value\": iris_tags\n    })\n    \n",
                    "warnings": {},
                    "x": 0,
                    "y": 296
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "check_risk_score",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "check_risk_score",
                        "id": "5",
                        "inputParameters": [
                            "pivot_action_1:action_result.data"
                        ],
                        "outputVariables": [
                            "high_risk_domains",
                            "high_risk_domains_count",
                            "dt_min_risk_score"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    queried_domains = []\n    for results in pivot_action_1_result_item_0:\n        for result in results:\n            risk_score = result.get(\"domain_risk\", {}).get(\"risk_score\")\n            domain = result.get(\"domain\")\n            is_active = result.get(\"active\")\n            queried_domains.append({\"domain\": domain, \"risk_score\": risk_score, \"active\": is_active})\n            \n    phantom.debug(f\"dt debug - checking {len(queried_domains)} domains from iris investigate.\")\n    \n    success, message, min_risk_score = phantom.get_list(list_name='domaintools_domain_risk', values=\"min_risk_score\")\n    domaintools_min_risk_score = int(min_risk_score['matches'][0]['value'][1])\n    \n    high_risk_domains = []\n    for domain in queried_domains:\n        risk_score = int(domain.get(\"risk_score\"))\n        is_active = domain.get(\"active\")\n        \n        if risk_score >= domaintools_min_risk_score and is_active:\n            high_risk_domains.append(domain)\n        \n    check_risk_score__high_risk_domains = high_risk_domains\n    check_risk_score__high_risk_domains_count = len(high_risk_domains)\n    check_risk_score__dt_min_risk_score = domaintools_min_risk_score\n    phantom.debug(f\"dt debug - Found {check_risk_score__high_risk_domains_count} high risk domain(s).\")\n    \n       \n",
                    "warnings": {},
                    "x": 0,
                    "y": 444
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "",
                            "customNameId": -1,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": ">=",
                                        "param": "check_risk_score:custom_function:high_risk_domains_count",
                                        "value": "1"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "7",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "decision",
                    "warnings": {},
                    "x": 80,
                    "y": 592
                },
                "8": {
                    "data": {
                        "advanced": {
                            "customName": "output_high_risk_domains",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 4,
                        "functionName": "output_high_risk_domains",
                        "id": "8",
                        "inputParameters": [
                            "check_risk_score:custom_function:high_risk_domains",
                            "check_risk_score:custom_function:out_filename",
                            "check_risk_score:custom_function:high_risk_domains_count"
                        ],
                        "outputVariables": [
                            "out_filename",
                            "event_name"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    from datetime import datetime\n    import csv\n     \n    event_name = container.get(\"name\")\n    file_name = f\"alert_high_risk_score_domains_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\"\n    phantom.debug(f\"dt debug - exporting {check_risk_score__high_risk_domains_count} domain to csv file.\")\n    \n    with open(f\"/opt/phantom/vault/tmp/{file_name}\", \"w\", newline='') as report_csv_file:\n        headers = [\"domain\", \"risk_score\", \"active\"]\n        writer = csv.DictWriter(report_csv_file, fieldnames=headers)\n        \n        writer.writeheader()\n        for domain in check_risk_score__high_risk_domains or []:\n            writer.writerow(domain)\n            \n    success, message, vault_id = phantom.vault_add(container=container, file_location=f\"/opt/phantom/vault/tmp/{file_name}\", file_name=file_name)\n    phantom.debug(f\"dt debug - {message}\")\n    \n    if not success:\n        phantom.error(f\"dt error - Error creating {file_name} file. Message: {message}\")\n        return\n    \n    output_high_risk_domains__out_filename = file_name\n    output_high_risk_domains__event_name = event_name\n",
                    "warnings": {},
                    "x": 100,
                    "y": 780
                },
                "9": {
                    "data": {
                        "advanced": {
                            "customName": "alert_high_risk_domain",
                            "customNameId": 0,
                            "join": []
                        },
                        "approver": {
                            "type": "user",
                            "value": "admin"
                        },
                        "functionId": 1,
                        "functionName": "alert_high_risk_domain",
                        "id": "9",
                        "message": "Found {0} domain with risk score >= {1}. For more details go to Event: {2} > \"Files\" tab > Download '{3}'.\n",
                        "parameters": [
                            "check_risk_score:custom_function:high_risk_domains_count",
                            "check_risk_score:custom_function:dt_min_risk_score",
                            "output_high_risk_domains:custom_function:event_name",
                            "output_high_risk_domains:custom_function:out_filename"
                        ],
                        "responseTime": 30,
                        "responses": [],
                        "type": "prompt"
                    },
                    "errors": {},
                    "id": "9",
                    "type": "prompt",
                    "warnings": {},
                    "x": 180,
                    "y": 940
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.9",
        "version": "6.0.0.114895"
    },
    "create_time": "2023-08-11T16:02:58.643261+00:00",
    "draft_mode": false,
    "labels": [
        "events"
    ],
    "tags": []
}