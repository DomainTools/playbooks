{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "NOD feeds playbook",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_3",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_3_to_port_1",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "6b81f55d47cc5694627fd9acd0f9a422de36c508",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 20,
                    "y": 0
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 20,
                    "y": 444
                },
                "2": {
                    "data": {
                        "action": "nod feed",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "DomainTools Iris Investigate",
                        "connectorConfigs": [
                            "domaintoolscreds"
                        ],
                        "connectorId": "f18b7ef9-0cbd-4dbb-b8ed-ce62e17f0603",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "nod_feed_1",
                        "id": "2",
                        "loop": {
                            "conditions": [
                                {
                                    "comparisons": [
                                        {
                                            "conditionIndex": 0,
                                            "op": "==",
                                            "param": "",
                                            "value": ""
                                        }
                                    ],
                                    "conditionIndex": 0,
                                    "display": "If",
                                    "logic": "and",
                                    "type": "if"
                                }
                            ],
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "session_id": "dt-integrations",
                            "top": ""
                        },
                        "requiredParameters": [],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "action",
                    "warnings": {},
                    "x": 0,
                    "y": 148
                },
                "3": {
                    "customCode": null,
                    "data": {
                        "advanced": {
                            "customName": "output NOD list",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "output_nod_list",
                        "id": "3",
                        "inputParameters": [
                            "nod_feed_1:action_result.data"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    from datetime import datetime\n    import csv\n     \n    event_name = container.get(\"name\")\n    file_name = f\"domaintools_feed_nod_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\"\n    phantom.debug(f\"dt debug - exporting NOD list to {file_name} file.\")\n    \n    with open(f\"/opt/phantom/vault/tmp/{file_name}\", \"w\", newline='') as report_csv_file:\n        headers = [\"domain\", \"timestamp\"]\n        writer = csv.DictWriter(report_csv_file, fieldnames=headers)\n        \n        writer.writeheader()\n        for data in nod_feed_1_result_item_0[0] or []:\n            writer.writerow(data)\n\n    success, message, vault_id = phantom.vault_add(container=container, file_location=f\"/opt/phantom/vault/tmp/{file_name}\", file_name=file_name)\n    \n    if not success:\n        phantom.error(f\"dt error - Error creating {file_name} file. Message: {message}\")\n        return\n    \n\n",
                    "warnings": {},
                    "x": 0,
                    "y": 300
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.11",
        "version": "6.2.0.355"
    },
    "create_time": "2024-11-21T17:24:42.258973+00:00",
    "draft_mode": false,
    "labels": [
        "events"
    ],
    "tags": []
}